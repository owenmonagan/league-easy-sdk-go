// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIScoreFormatCreateRequest api score format create request
//
// swagger:model apiScoreFormatCreateRequest
type APIScoreFormatCreateRequest struct {

	// compare at level
	CompareAtLevel string `json:"compareAtLevel,omitempty"`

	// fields
	Fields []*APIField `json:"fields"`

	// has format
	HasFormat []*APIScoreFormatCreateRequestHasFormat `json:"hasFormat"`

	// points per position
	PointsPerPosition map[string]APIPointsPerEntries `json:"pointsPerPosition,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// ties disabled
	TiesDisabled bool `json:"tiesDisabled,omitempty"`

	// tournament Id
	TournamentID string `json:"tournamentId,omitempty"`
}

// Validate validates this api score format create request
func (m *APIScoreFormatCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointsPerPosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIScoreFormatCreateRequest) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIScoreFormatCreateRequest) validateHasFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.HasFormat) { // not required
		return nil
	}

	for i := 0; i < len(m.HasFormat); i++ {
		if swag.IsZero(m.HasFormat[i]) { // not required
			continue
		}

		if m.HasFormat[i] != nil {
			if err := m.HasFormat[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hasFormat" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIScoreFormatCreateRequest) validatePointsPerPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.PointsPerPosition) { // not required
		return nil
	}

	for k := range m.PointsPerPosition {

		if err := validate.Required("pointsPerPosition"+"."+k, "body", m.PointsPerPosition[k]); err != nil {
			return err
		}
		if val, ok := m.PointsPerPosition[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIScoreFormatCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIScoreFormatCreateRequest) UnmarshalBinary(b []byte) error {
	var res APIScoreFormatCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
