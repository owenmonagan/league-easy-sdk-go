// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIStageRoundRobinCreateRequest api stage round robin create request
//
// swagger:model apiStageRoundRobinCreateRequest
type APIStageRoundRobinCreateRequest struct {

	// max entries per group
	MaxEntriesPerGroup int32 `json:"maxEntriesPerGroup,omitempty"`

	// max qualifiers per group
	MaxQualifiersPerGroup int32 `json:"maxQualifiersPerGroup,omitempty"`

	// min number of repetitions
	MinNumberOfRepetitions int32 `json:"minNumberOfRepetitions,omitempty"`

	// stages from
	StagesFrom []*StageRoundRobinCreateRequestStageFrom `json:"stagesFrom"`

	// tournament Id
	TournamentID string `json:"tournamentId,omitempty"`
}

// Validate validates this api stage round robin create request
func (m *APIStageRoundRobinCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStagesFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIStageRoundRobinCreateRequest) validateStagesFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.StagesFrom) { // not required
		return nil
	}

	for i := 0; i < len(m.StagesFrom); i++ {
		if swag.IsZero(m.StagesFrom[i]) { // not required
			continue
		}

		if m.StagesFrom[i] != nil {
			if err := m.StagesFrom[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stagesFrom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIStageRoundRobinCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIStageRoundRobinCreateRequest) UnmarshalBinary(b []byte) error {
	var res APIStageRoundRobinCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
