// Code generated by go-swagger; DO NOT EDIT.

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new entries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for entries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TournamentServiceCreateMixin1(params *TournamentServiceCreateMixin1Params) (*TournamentServiceCreateMixin1OK, error)

	TournamentServiceDeleteMixin1(params *TournamentServiceDeleteMixin1Params) (*TournamentServiceDeleteMixin1OK, error)

	TournamentServiceUpdateMixin1(params *TournamentServiceUpdateMixin1Params) (*TournamentServiceUpdateMixin1OK, error)

	TournamentServiceViewMixin1(params *TournamentServiceViewMixin1Params) (*TournamentServiceViewMixin1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TournamentServiceCreateMixin1 adds an entry

  Add an entry to the server.
*/
func (a *Client) TournamentServiceCreateMixin1(params *TournamentServiceCreateMixin1Params) (*TournamentServiceCreateMixin1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceCreateMixin1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_CreateMixin1",
		Method:             "POST",
		PathPattern:        "/api/v1/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceCreateMixin1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceCreateMixin1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceCreateMixin1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceDeleteMixin1 deletes an entry

  Update an entry when given an id
*/
func (a *Client) TournamentServiceDeleteMixin1(params *TournamentServiceDeleteMixin1Params) (*TournamentServiceDeleteMixin1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceDeleteMixin1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_DeleteMixin1",
		Method:             "DELETE",
		PathPattern:        "/api/v1/entries/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceDeleteMixin1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceDeleteMixin1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceDeleteMixin1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceUpdateMixin1 updates an entry

  Update an entry when given an id
*/
func (a *Client) TournamentServiceUpdateMixin1(params *TournamentServiceUpdateMixin1Params) (*TournamentServiceUpdateMixin1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceUpdateMixin1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_UpdateMixin1",
		Method:             "PATCH",
		PathPattern:        "/api/v1/entries/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceUpdateMixin1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceUpdateMixin1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceUpdateMixin1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceViewMixin1 views an entry

  View an entry when given an id
*/
func (a *Client) TournamentServiceViewMixin1(params *TournamentServiceViewMixin1Params) (*TournamentServiceViewMixin1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceViewMixin1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_ViewMixin1",
		Method:             "GET",
		PathPattern:        "/api/v1/entries/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceViewMixin1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceViewMixin1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceViewMixin1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
