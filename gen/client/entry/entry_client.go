// Code generated by go-swagger; DO NOT EDIT.

package entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new entry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for entry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EntryServiceCreateBatch(params *EntryServiceCreateBatchParams) (*EntryServiceCreateBatchOK, error)

	EntryServiceDelete(params *EntryServiceDeleteParams) (*EntryServiceDeleteOK, error)

	EntryServiceUpdate(params *EntryServiceUpdateParams) (*EntryServiceUpdateOK, error)

	EntryServiceView(params *EntryServiceViewParams) (*EntryServiceViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EntryServiceCreateBatch adds an entry

  Add an entry to the server.
*/
func (a *Client) EntryServiceCreateBatch(params *EntryServiceCreateBatchParams) (*EntryServiceCreateBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceCreateBatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_CreateBatch",
		Method:             "POST",
		PathPattern:        "/api/v1/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceCreateBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceCreateBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceCreateBatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EntryServiceDelete deletes an entry

  Delete an entry when given an id
*/
func (a *Client) EntryServiceDelete(params *EntryServiceDeleteParams) (*EntryServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/entry/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EntryServiceUpdate updates an entry

  Update an entry when given an id
*/
func (a *Client) EntryServiceUpdate(params *EntryServiceUpdateParams) (*EntryServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/entry/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EntryServiceView views an entry

  View an entry when given an id
*/
func (a *Client) EntryServiceView(params *EntryServiceViewParams) (*EntryServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/entry/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
