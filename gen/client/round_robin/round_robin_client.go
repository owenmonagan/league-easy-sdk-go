// Code generated by go-swagger; DO NOT EDIT.

package round_robin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new round robin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for round robin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	StageRoundRobinServiceCreate(params *StageRoundRobinServiceCreateParams) (*StageRoundRobinServiceCreateOK, error)

	StageRoundRobinServiceDelete(params *StageRoundRobinServiceDeleteParams) (*StageRoundRobinServiceDeleteOK, error)

	StageRoundRobinServiceUpdate(params *StageRoundRobinServiceUpdateParams) (*StageRoundRobinServiceUpdateOK, error)

	StageRoundRobinServiceView(params *StageRoundRobinServiceViewParams) (*StageRoundRobinServiceViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  StageRoundRobinServiceCreate adds an round robin

  Add a round robin stage to the server
*/
func (a *Client) StageRoundRobinServiceCreate(params *StageRoundRobinServiceCreateParams) (*StageRoundRobinServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/roundrobin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceDelete deletes a round robin stage

  Delete a round robin stage when given an id
*/
func (a *Client) StageRoundRobinServiceDelete(params *StageRoundRobinServiceDeleteParams) (*StageRoundRobinServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/stage/roundrobin/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceUpdate updates a round robin stage

  Update a round robin stage when given an id
*/
func (a *Client) StageRoundRobinServiceUpdate(params *StageRoundRobinServiceUpdateParams) (*StageRoundRobinServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/stage/roundrobin/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceView views a round robin stage

  View a round robin stage when given an id
*/
func (a *Client) StageRoundRobinServiceView(params *StageRoundRobinServiceViewParams) (*StageRoundRobinServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/stage/roundrobin/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
