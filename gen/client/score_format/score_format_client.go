// Code generated by go-swagger; DO NOT EDIT.

package score_format

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new score format API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for score format API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ScoreFormatServiceCreate(params *ScoreFormatServiceCreateParams) (*ScoreFormatServiceCreateOK, error)

	ScoreFormatServiceDelete(params *ScoreFormatServiceDeleteParams) (*ScoreFormatServiceDeleteOK, error)

	ScoreFormatServiceUpdate(params *ScoreFormatServiceUpdateParams) (*ScoreFormatServiceUpdateOK, error)

	ScoreFormatServiceView(params *ScoreFormatServiceViewParams) (*ScoreFormatServiceViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ScoreFormatServiceCreate adds a score format

  Add a score format to the server.
*/
func (a *Client) ScoreFormatServiceCreate(params *ScoreFormatServiceCreateParams) (*ScoreFormatServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScoreFormatServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScoreFormatService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/format/score",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScoreFormatServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScoreFormatServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScoreFormatServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ScoreFormatServiceDelete deletes a score format

  Delete a score format when given an id
*/
func (a *Client) ScoreFormatServiceDelete(params *ScoreFormatServiceDeleteParams) (*ScoreFormatServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScoreFormatServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScoreFormatService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/format/score/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScoreFormatServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScoreFormatServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScoreFormatServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ScoreFormatServiceUpdate updates a score format

  Update a score format when given an id
*/
func (a *Client) ScoreFormatServiceUpdate(params *ScoreFormatServiceUpdateParams) (*ScoreFormatServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScoreFormatServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScoreFormatService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/format/score/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScoreFormatServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScoreFormatServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScoreFormatServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ScoreFormatServiceView views a score format

  View a score format when given an id
*/
func (a *Client) ScoreFormatServiceView(params *ScoreFormatServiceViewParams) (*ScoreFormatServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScoreFormatServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScoreFormatService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/format/score/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScoreFormatServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScoreFormatServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScoreFormatServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
