// Code generated by go-swagger; DO NOT EDIT.

package series

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new series API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for series API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SeriesServiceQuery(params *SeriesServiceQueryParams) (*SeriesServiceQueryOK, error)

	SeriesServiceView(params *SeriesServiceViewParams) (*SeriesServiceViewOK, error)

	StageRoundRobinServiceQuery(params *StageRoundRobinServiceQueryParams) (*StageRoundRobinServiceQueryOK, error)

	StageSingleEliminationServiceQuery(params *StageSingleEliminationServiceQueryParams) (*StageSingleEliminationServiceQueryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SeriesServiceQuery queries for series

  Query for series
*/
func (a *Client) SeriesServiceQuery(params *SeriesServiceQueryParams) (*SeriesServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/series/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SeriesServiceView views a series

  View a series when given an id
*/
func (a *Client) SeriesServiceView(params *SeriesServiceViewParams) (*SeriesServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/series/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceQuery queries for stages of round robin

  Query for stages of round robin
*/
func (a *Client) StageRoundRobinServiceQuery(params *StageRoundRobinServiceQueryParams) (*StageRoundRobinServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/rr/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceQuery queries for stages of single elimination

  Query for stages of single_elimination
*/
func (a *Client) StageSingleEliminationServiceQuery(params *StageSingleEliminationServiceQueryParams) (*StageSingleEliminationServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/se/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
