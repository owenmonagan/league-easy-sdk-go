// Code generated by go-swagger; DO NOT EDIT.

package round

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new round API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for round API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GroupServiceQuery(params *GroupServiceQueryParams) (*GroupServiceQueryOK, error)

	GroupServiceView(params *GroupServiceViewParams) (*GroupServiceViewOK, error)

	RoundServiceQuery(params *RoundServiceQueryParams) (*RoundServiceQueryOK, error)

	RoundServiceView(params *RoundServiceViewParams) (*RoundServiceViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GroupServiceQuery queries for group

  Query for group
*/
func (a *Client) GroupServiceQuery(params *GroupServiceQueryParams) (*GroupServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/group/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GroupServiceView views a group

  View a group when given an id
*/
func (a *Client) GroupServiceView(params *GroupServiceViewParams) (*GroupServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RoundServiceQuery queries for round

  Query for round
*/
func (a *Client) RoundServiceQuery(params *RoundServiceQueryParams) (*RoundServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoundServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RoundService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/round/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoundServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoundServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoundServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RoundServiceView views a round

  View a round when given an id
*/
func (a *Client) RoundServiceView(params *RoundServiceViewParams) (*RoundServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoundServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RoundService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/round/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoundServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoundServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoundServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
