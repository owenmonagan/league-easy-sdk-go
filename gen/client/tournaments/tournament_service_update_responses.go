// Code generated by go-swagger; DO NOT EDIT.

package tournaments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owenmonagan/toureasy-sdk-go/gen/models"
)

// TournamentServiceUpdateReader is a Reader for the TournamentServiceUpdate structure.
type TournamentServiceUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TournamentServiceUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTournamentServiceUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTournamentServiceUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTournamentServiceUpdateOK creates a TournamentServiceUpdateOK with default headers values
func NewTournamentServiceUpdateOK() *TournamentServiceUpdateOK {
	return &TournamentServiceUpdateOK{}
}

/*TournamentServiceUpdateOK handles this case with default header values.

A successful response.
*/
type TournamentServiceUpdateOK struct {
	Payload *models.APITournament
}

func (o *TournamentServiceUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/tournaments/{uuid}][%d] tournamentServiceUpdateOK  %+v", 200, o.Payload)
}

func (o *TournamentServiceUpdateOK) GetPayload() *models.APITournament {
	return o.Payload
}

func (o *TournamentServiceUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APITournament)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTournamentServiceUpdateDefault creates a TournamentServiceUpdateDefault with default headers values
func NewTournamentServiceUpdateDefault(code int) *TournamentServiceUpdateDefault {
	return &TournamentServiceUpdateDefault{
		_statusCode: code,
	}
}

/*TournamentServiceUpdateDefault handles this case with default header values.

An unexpected error response.
*/
type TournamentServiceUpdateDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// Code gets the status code for the tournament service update default response
func (o *TournamentServiceUpdateDefault) Code() int {
	return o._statusCode
}

func (o *TournamentServiceUpdateDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/tournaments/{uuid}][%d] TournamentService_Update default  %+v", o._statusCode, o.Payload)
}

func (o *TournamentServiceUpdateDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *TournamentServiceUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
