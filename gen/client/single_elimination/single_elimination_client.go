// Code generated by go-swagger; DO NOT EDIT.

package single_elimination

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new single elimination API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for single elimination API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	StageSingleEliminationServiceCreate(params *StageSingleEliminationServiceCreateParams) (*StageSingleEliminationServiceCreateOK, error)

	StageSingleEliminationServiceDelete(params *StageSingleEliminationServiceDeleteParams) (*StageSingleEliminationServiceDeleteOK, error)

	StageSingleEliminationServiceUpdate(params *StageSingleEliminationServiceUpdateParams) (*StageSingleEliminationServiceUpdateOK, error)

	StageSingleEliminationServiceView(params *StageSingleEliminationServiceViewParams) (*StageSingleEliminationServiceViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  StageSingleEliminationServiceCreate adds a single elimination stage

  Add a single elimination stage stage to the server
*/
func (a *Client) StageSingleEliminationServiceCreate(params *StageSingleEliminationServiceCreateParams) (*StageSingleEliminationServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/se",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceDelete deletes a single elimination stage

  Delete a single elimination stage when given an id
*/
func (a *Client) StageSingleEliminationServiceDelete(params *StageSingleEliminationServiceDeleteParams) (*StageSingleEliminationServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/stage/se/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceUpdate updates a single elimination stage

  Update a single elimination stage when given an id
*/
func (a *Client) StageSingleEliminationServiceUpdate(params *StageSingleEliminationServiceUpdateParams) (*StageSingleEliminationServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/stage/se/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceView views a single elimination stage

  View a single elimination stage when given an id
*/
func (a *Client) StageSingleEliminationServiceView(params *StageSingleEliminationServiceViewParams) (*StageSingleEliminationServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/stage/se/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
