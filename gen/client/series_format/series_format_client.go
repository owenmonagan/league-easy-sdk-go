// Code generated by go-swagger; DO NOT EDIT.

package series_format

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new series format API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for series format API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SeriesFormatServiceCreate(params *SeriesFormatServiceCreateParams) (*SeriesFormatServiceCreateOK, error)

	SeriesFormatServiceDelete(params *SeriesFormatServiceDeleteParams) (*SeriesFormatServiceDeleteOK, error)

	SeriesFormatServiceUpdate(params *SeriesFormatServiceUpdateParams) (*SeriesFormatServiceUpdateOK, error)

	SeriesFormatServiceView(params *SeriesFormatServiceViewParams) (*SeriesFormatServiceViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SeriesFormatServiceCreate adds a series format

  Add a series format to the server.
*/
func (a *Client) SeriesFormatServiceCreate(params *SeriesFormatServiceCreateParams) (*SeriesFormatServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesFormatServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesFormatService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/format/series",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesFormatServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesFormatServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesFormatServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SeriesFormatServiceDelete deletes a series format

  Delete a series format when given an id
*/
func (a *Client) SeriesFormatServiceDelete(params *SeriesFormatServiceDeleteParams) (*SeriesFormatServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesFormatServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesFormatService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/format/series/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesFormatServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesFormatServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesFormatServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SeriesFormatServiceUpdate updates a series format

  Update a series format when given an id
*/
func (a *Client) SeriesFormatServiceUpdate(params *SeriesFormatServiceUpdateParams) (*SeriesFormatServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesFormatServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesFormatService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/format/series/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesFormatServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesFormatServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesFormatServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SeriesFormatServiceView views a series format

  View a series format when given an id
*/
func (a *Client) SeriesFormatServiceView(params *SeriesFormatServiceViewParams) (*SeriesFormatServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesFormatServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesFormatService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/format/series/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesFormatServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesFormatServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesFormatServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
