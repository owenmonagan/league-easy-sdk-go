// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIFormatScore api format score
//
// swagger:model apiFormatScore
type APIFormatScore struct {

	// compare at level
	CompareAtLevel APICollection `json:"compareAtLevel,omitempty"`

	// fields
	Fields []*APIField `json:"fields"`

	// id
	ID string `json:"id,omitempty"`

	// points per position
	PointsPerPosition []*APIPointsPerPosition `json:"pointsPerPosition"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// ties disabled
	TiesDisabled bool `json:"tiesDisabled,omitempty"`

	// timestamps
	Timestamps *APITimestamps `json:"timestamps,omitempty"`
}

// Validate validates this api format score
func (m *APIFormatScore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompareAtLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointsPerPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFormatScore) validateCompareAtLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.CompareAtLevel) { // not required
		return nil
	}

	if err := m.CompareAtLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("compareAtLevel")
		}
		return err
	}

	return nil
}

func (m *APIFormatScore) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIFormatScore) validatePointsPerPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.PointsPerPosition) { // not required
		return nil
	}

	for i := 0; i < len(m.PointsPerPosition); i++ {
		if swag.IsZero(m.PointsPerPosition[i]) { // not required
			continue
		}

		if m.PointsPerPosition[i] != nil {
			if err := m.PointsPerPosition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pointsPerPosition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIFormatScore) validateTimestamps(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamps) { // not required
		return nil
	}

	if m.Timestamps != nil {
		if err := m.Timestamps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamps")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIFormatScore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIFormatScore) UnmarshalBinary(b []byte) error {
	var res APIFormatScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
