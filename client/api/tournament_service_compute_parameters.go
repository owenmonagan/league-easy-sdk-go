// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/owenmonagan/toureasy-sdk-go/models"
)

// NewTournamentServiceComputeParams creates a new TournamentServiceComputeParams object
// with the default values initialized.
func NewTournamentServiceComputeParams() *TournamentServiceComputeParams {
	var ()
	return &TournamentServiceComputeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTournamentServiceComputeParamsWithTimeout creates a new TournamentServiceComputeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTournamentServiceComputeParamsWithTimeout(timeout time.Duration) *TournamentServiceComputeParams {
	var ()
	return &TournamentServiceComputeParams{

		timeout: timeout,
	}
}

// NewTournamentServiceComputeParamsWithContext creates a new TournamentServiceComputeParams object
// with the default values initialized, and the ability to set a context for a request
func NewTournamentServiceComputeParamsWithContext(ctx context.Context) *TournamentServiceComputeParams {
	var ()
	return &TournamentServiceComputeParams{

		Context: ctx,
	}
}

// NewTournamentServiceComputeParamsWithHTTPClient creates a new TournamentServiceComputeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTournamentServiceComputeParamsWithHTTPClient(client *http.Client) *TournamentServiceComputeParams {
	var ()
	return &TournamentServiceComputeParams{
		HTTPClient: client,
	}
}

/*TournamentServiceComputeParams contains all the parameters to send to the API endpoint
for the tournament service compute operation typically these are written to a http.Request
*/
type TournamentServiceComputeParams struct {

	/*Body*/
	Body *models.APIID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the tournament service compute params
func (o *TournamentServiceComputeParams) WithTimeout(timeout time.Duration) *TournamentServiceComputeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tournament service compute params
func (o *TournamentServiceComputeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tournament service compute params
func (o *TournamentServiceComputeParams) WithContext(ctx context.Context) *TournamentServiceComputeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tournament service compute params
func (o *TournamentServiceComputeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tournament service compute params
func (o *TournamentServiceComputeParams) WithHTTPClient(client *http.Client) *TournamentServiceComputeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tournament service compute params
func (o *TournamentServiceComputeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the tournament service compute params
func (o *TournamentServiceComputeParams) WithBody(body *models.APIID) *TournamentServiceComputeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the tournament service compute params
func (o *TournamentServiceComputeParams) SetBody(body *models.APIID) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *TournamentServiceComputeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
