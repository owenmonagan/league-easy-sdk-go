// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owenmonagan/toureasy-sdk-go/models"
)

// RoundServiceComputeReader is a Reader for the RoundServiceCompute structure.
type RoundServiceComputeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoundServiceComputeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoundServiceComputeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRoundServiceComputeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRoundServiceComputeOK creates a RoundServiceComputeOK with default headers values
func NewRoundServiceComputeOK() *RoundServiceComputeOK {
	return &RoundServiceComputeOK{}
}

/*RoundServiceComputeOK handles this case with default header values.

A successful response.
*/
type RoundServiceComputeOK struct {
	Payload *models.APIRoundResponse
}

func (o *RoundServiceComputeOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/round/compute][%d] roundServiceComputeOK  %+v", 200, o.Payload)
}

func (o *RoundServiceComputeOK) GetPayload() *models.APIRoundResponse {
	return o.Payload
}

func (o *RoundServiceComputeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIRoundResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoundServiceComputeDefault creates a RoundServiceComputeDefault with default headers values
func NewRoundServiceComputeDefault(code int) *RoundServiceComputeDefault {
	return &RoundServiceComputeDefault{
		_statusCode: code,
	}
}

/*RoundServiceComputeDefault handles this case with default header values.

An unexpected error response.
*/
type RoundServiceComputeDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// Code gets the status code for the round service compute default response
func (o *RoundServiceComputeDefault) Code() int {
	return o._statusCode
}

func (o *RoundServiceComputeDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/round/compute][%d] RoundService_Compute default  %+v", o._statusCode, o.Payload)
}

func (o *RoundServiceComputeDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *RoundServiceComputeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
