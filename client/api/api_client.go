// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EntryServiceDelete(params *EntryServiceDeleteParams) (*EntryServiceDeleteOK, error)

	EntryServiceUpdate(params *EntryServiceUpdateParams) (*EntryServiceUpdateOK, error)

	EntryServiceView(params *EntryServiceViewParams) (*EntryServiceViewOK, error)

	EntryServiceWriteBatch(params *EntryServiceWriteBatchParams) (*EntryServiceWriteBatchOK, error)

	FormatScoreServiceCreate(params *FormatScoreServiceCreateParams) (*FormatScoreServiceCreateOK, error)

	FormatScoreServiceDelete(params *FormatScoreServiceDeleteParams) (*FormatScoreServiceDeleteOK, error)

	FormatScoreServiceUpdate(params *FormatScoreServiceUpdateParams) (*FormatScoreServiceUpdateOK, error)

	FormatScoreServiceView(params *FormatScoreServiceViewParams) (*FormatScoreServiceViewOK, error)

	FormatSeriesServiceCreate(params *FormatSeriesServiceCreateParams) (*FormatSeriesServiceCreateOK, error)

	FormatSeriesServiceDelete(params *FormatSeriesServiceDeleteParams) (*FormatSeriesServiceDeleteOK, error)

	FormatSeriesServiceUpdate(params *FormatSeriesServiceUpdateParams) (*FormatSeriesServiceUpdateOK, error)

	FormatSeriesServiceView(params *FormatSeriesServiceViewParams) (*FormatSeriesServiceViewOK, error)

	GameServiceQuery(params *GameServiceQueryParams) (*GameServiceQueryOK, error)

	GameServiceView(params *GameServiceViewParams) (*GameServiceViewOK, error)

	GroupServiceQuery(params *GroupServiceQueryParams) (*GroupServiceQueryOK, error)

	GroupServiceView(params *GroupServiceViewParams) (*GroupServiceViewOK, error)

	RoundServiceQuery(params *RoundServiceQueryParams) (*RoundServiceQueryOK, error)

	RoundServiceView(params *RoundServiceViewParams) (*RoundServiceViewOK, error)

	ScoreServiceCreate(params *ScoreServiceCreateParams) (*ScoreServiceCreateOK, error)

	ScoreServiceView(params *ScoreServiceViewParams) (*ScoreServiceViewOK, error)

	SeriesServiceQuery(params *SeriesServiceQueryParams) (*SeriesServiceQueryOK, error)

	SeriesServiceView(params *SeriesServiceViewParams) (*SeriesServiceViewOK, error)

	StageRoundRobinServiceCreate(params *StageRoundRobinServiceCreateParams) (*StageRoundRobinServiceCreateOK, error)

	StageRoundRobinServiceDelete(params *StageRoundRobinServiceDeleteParams) (*StageRoundRobinServiceDeleteOK, error)

	StageRoundRobinServiceQuery(params *StageRoundRobinServiceQueryParams) (*StageRoundRobinServiceQueryOK, error)

	StageRoundRobinServiceUpdate(params *StageRoundRobinServiceUpdateParams) (*StageRoundRobinServiceUpdateOK, error)

	StageRoundRobinServiceView(params *StageRoundRobinServiceViewParams) (*StageRoundRobinServiceViewOK, error)

	StageSingleEliminationServiceCreate(params *StageSingleEliminationServiceCreateParams) (*StageSingleEliminationServiceCreateOK, error)

	StageSingleEliminationServiceDelete(params *StageSingleEliminationServiceDeleteParams) (*StageSingleEliminationServiceDeleteOK, error)

	StageSingleEliminationServiceQuery(params *StageSingleEliminationServiceQueryParams) (*StageSingleEliminationServiceQueryOK, error)

	StageSingleEliminationServiceUpdate(params *StageSingleEliminationServiceUpdateParams) (*StageSingleEliminationServiceUpdateOK, error)

	StageSingleEliminationServiceView(params *StageSingleEliminationServiceViewParams) (*StageSingleEliminationServiceViewOK, error)

	TournamentServiceCompute(params *TournamentServiceComputeParams) (*TournamentServiceComputeOK, error)

	TournamentServiceCreate(params *TournamentServiceCreateParams) (*TournamentServiceCreateOK, error)

	TournamentServiceDelete(params *TournamentServiceDeleteParams) (*TournamentServiceDeleteOK, error)

	TournamentServiceQuery(params *TournamentServiceQueryParams) (*TournamentServiceQueryOK, error)

	TournamentServiceUpdate(params *TournamentServiceUpdateParams) (*TournamentServiceUpdateOK, error)

	TournamentServiceView(params *TournamentServiceViewParams) (*TournamentServiceViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EntryServiceDelete deletes an entry

  Delete an entry when given an id
*/
func (a *Client) EntryServiceDelete(params *EntryServiceDeleteParams) (*EntryServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EntryServiceUpdate updates an entry

  Update an entry when given an id
*/
func (a *Client) EntryServiceUpdate(params *EntryServiceUpdateParams) (*EntryServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EntryServiceView views an entry

  View an entry when given an id
*/
func (a *Client) EntryServiceView(params *EntryServiceViewParams) (*EntryServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EntryServiceWriteBatch writes a batch of entries

  existing entries with the same id will be overwritten
*/
func (a *Client) EntryServiceWriteBatch(params *EntryServiceWriteBatchParams) (*EntryServiceWriteBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntryServiceWriteBatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntryService_WriteBatch",
		Method:             "POST",
		PathPattern:        "/api/v1/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntryServiceWriteBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntryServiceWriteBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EntryServiceWriteBatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatScoreServiceCreate adds a score format

  Add a score format to the server.
*/
func (a *Client) FormatScoreServiceCreate(params *FormatScoreServiceCreateParams) (*FormatScoreServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatScoreServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatScoreService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/format/score",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatScoreServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatScoreServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatScoreServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatScoreServiceDelete deletes a score format

  Delete a score format when given an id
*/
func (a *Client) FormatScoreServiceDelete(params *FormatScoreServiceDeleteParams) (*FormatScoreServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatScoreServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatScoreService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/format/score/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatScoreServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatScoreServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatScoreServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatScoreServiceUpdate updates a score format

  Update a score format when given an id
*/
func (a *Client) FormatScoreServiceUpdate(params *FormatScoreServiceUpdateParams) (*FormatScoreServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatScoreServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatScoreService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/format/score/{object.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatScoreServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatScoreServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatScoreServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatScoreServiceView views a score format

  View a score format when given an id
*/
func (a *Client) FormatScoreServiceView(params *FormatScoreServiceViewParams) (*FormatScoreServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatScoreServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatScoreService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/format/score/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatScoreServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatScoreServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatScoreServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatSeriesServiceCreate adds a series format

  Add a series format to the server.
*/
func (a *Client) FormatSeriesServiceCreate(params *FormatSeriesServiceCreateParams) (*FormatSeriesServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatSeriesServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatSeriesService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/format/series",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatSeriesServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatSeriesServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatSeriesServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatSeriesServiceDelete deletes a series format

  Delete a series format when given an id
*/
func (a *Client) FormatSeriesServiceDelete(params *FormatSeriesServiceDeleteParams) (*FormatSeriesServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatSeriesServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatSeriesService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/format/series/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatSeriesServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatSeriesServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatSeriesServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatSeriesServiceUpdate updates a series format

  Update a series format when given an id
*/
func (a *Client) FormatSeriesServiceUpdate(params *FormatSeriesServiceUpdateParams) (*FormatSeriesServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatSeriesServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatSeriesService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/format/series/{object.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatSeriesServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatSeriesServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatSeriesServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FormatSeriesServiceView views a series format

  View a series format when given an id
*/
func (a *Client) FormatSeriesServiceView(params *FormatSeriesServiceViewParams) (*FormatSeriesServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFormatSeriesServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FormatSeriesService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/format/series/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FormatSeriesServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FormatSeriesServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FormatSeriesServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GameServiceQuery queries for game

  Query for game
*/
func (a *Client) GameServiceQuery(params *GameServiceQueryParams) (*GameServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGameServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GameService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/game/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GameServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GameServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GameServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GameServiceView views a game

  View a game when given an id
*/
func (a *Client) GameServiceView(params *GameServiceViewParams) (*GameServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGameServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GameService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/game/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GameServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GameServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GameServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GroupServiceQuery queries for group

  Query for group
*/
func (a *Client) GroupServiceQuery(params *GroupServiceQueryParams) (*GroupServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/group/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GroupServiceView views a group

  View a group when given an id
*/
func (a *Client) GroupServiceView(params *GroupServiceViewParams) (*GroupServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GroupService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RoundServiceQuery queries for round

  Query for round
*/
func (a *Client) RoundServiceQuery(params *RoundServiceQueryParams) (*RoundServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoundServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RoundService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/round/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoundServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoundServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoundServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RoundServiceView views a round

  View a round when given an id
*/
func (a *Client) RoundServiceView(params *RoundServiceViewParams) (*RoundServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoundServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RoundService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/round/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoundServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoundServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoundServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ScoreServiceCreate adds a score

  Add a score to the server.
*/
func (a *Client) ScoreServiceCreate(params *ScoreServiceCreateParams) (*ScoreServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScoreServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScoreService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/score",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScoreServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScoreServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScoreServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ScoreServiceView views a score

  View a score when given an id
*/
func (a *Client) ScoreServiceView(params *ScoreServiceViewParams) (*ScoreServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScoreServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScoreService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/score/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScoreServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScoreServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScoreServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SeriesServiceQuery queries for series

  Query for series
*/
func (a *Client) SeriesServiceQuery(params *SeriesServiceQueryParams) (*SeriesServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/series/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SeriesServiceView views a series

  View a series when given an id
*/
func (a *Client) SeriesServiceView(params *SeriesServiceViewParams) (*SeriesServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeriesServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SeriesService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/series/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeriesServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeriesServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeriesServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceCreate adds an round robin

  Add a round robin stage to the server
*/
func (a *Client) StageRoundRobinServiceCreate(params *StageRoundRobinServiceCreateParams) (*StageRoundRobinServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/rr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceDelete deletes a round robin stage

  Delete a round robin stage when given an id
*/
func (a *Client) StageRoundRobinServiceDelete(params *StageRoundRobinServiceDeleteParams) (*StageRoundRobinServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/stage/roundrobin/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceQuery queries for stages of round robin

  Query for stages of round robin
*/
func (a *Client) StageRoundRobinServiceQuery(params *StageRoundRobinServiceQueryParams) (*StageRoundRobinServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/rr/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceUpdate updates a round robin stage

  Update a round robin stage when given an id
*/
func (a *Client) StageRoundRobinServiceUpdate(params *StageRoundRobinServiceUpdateParams) (*StageRoundRobinServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/stage/rr/{object.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageRoundRobinServiceView views a round robin stage

  View a round robin stage when given an id
*/
func (a *Client) StageRoundRobinServiceView(params *StageRoundRobinServiceViewParams) (*StageRoundRobinServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageRoundRobinServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageRoundRobinService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/stage/rr/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageRoundRobinServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageRoundRobinServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageRoundRobinServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceCreate adds a single elimination stage

  Add a single elimination stage stage to the server
*/
func (a *Client) StageSingleEliminationServiceCreate(params *StageSingleEliminationServiceCreateParams) (*StageSingleEliminationServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/se",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceDelete deletes a single elimination stage

  Delete a single elimination stage when given an id
*/
func (a *Client) StageSingleEliminationServiceDelete(params *StageSingleEliminationServiceDeleteParams) (*StageSingleEliminationServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/stage/se/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceQuery queries for stages of single elimination

  Query for stages of single_elimination
*/
func (a *Client) StageSingleEliminationServiceQuery(params *StageSingleEliminationServiceQueryParams) (*StageSingleEliminationServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/stage/se/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceUpdate updates a single elimination stage

  Update a single elimination stage when given an id
*/
func (a *Client) StageSingleEliminationServiceUpdate(params *StageSingleEliminationServiceUpdateParams) (*StageSingleEliminationServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/stage/se/{object.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StageSingleEliminationServiceView views a single elimination stage

  View a single elimination stage when given an id
*/
func (a *Client) StageSingleEliminationServiceView(params *StageSingleEliminationServiceViewParams) (*StageSingleEliminationServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStageSingleEliminationServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StageSingleEliminationService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/stage/se/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StageSingleEliminationServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StageSingleEliminationServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StageSingleEliminationServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceCompute computes the tournament

  generates and updates tournament structures, required for the progression of the tournament
*/
func (a *Client) TournamentServiceCompute(params *TournamentServiceComputeParams) (*TournamentServiceComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceComputeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_Compute",
		Method:             "POST",
		PathPattern:        "/api/v1/tournament/compute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceComputeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceComputeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceCreate adds a tournament

  Add a tournament to the server.
*/
func (a *Client) TournamentServiceCreate(params *TournamentServiceCreateParams) (*TournamentServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/tournament",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceDelete deletes tournament

  Delete a tournament when given an id
*/
func (a *Client) TournamentServiceDelete(params *TournamentServiceDeleteParams) (*TournamentServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/tournament/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceQuery queries for tournament

  Query for tournament
*/
func (a *Client) TournamentServiceQuery(params *TournamentServiceQueryParams) (*TournamentServiceQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_Query",
		Method:             "POST",
		PathPattern:        "/api/v1/tournament/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceUpdate updates a tournament

  Update a tournament when given an id
*/
func (a *Client) TournamentServiceUpdate(params *TournamentServiceUpdateParams) (*TournamentServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_Update",
		Method:             "PATCH",
		PathPattern:        "/api/v1/tournament/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TournamentServiceView views a tournament

  View a tournament when given an id
*/
func (a *Client) TournamentServiceView(params *TournamentServiceViewParams) (*TournamentServiceViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTournamentServiceViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TournamentService_View",
		Method:             "GET",
		PathPattern:        "/api/v1/tournament/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TournamentServiceViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TournamentServiceViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TournamentServiceViewDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
